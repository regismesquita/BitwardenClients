---
name: Version Bump
run-name: Version Bump - ${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      bump_browser:
        description: "Browser Project Version Bump"
        type: boolean
        default: false
      bump_cli:
        description: "CLI Project Version Bump"
        type: boolean
        default: false
      bump_desktop:
        description: "Desktop Project Version Bump"
        type: boolean
        default: false
      bump_web:
        description: "Web Project Version Bump"
        type: boolean
        default: false
      version_number:
        description: "New Version"
        required: true

  workflow_call:
    inputs:
      version_number:
        required: true
        type: string
      bump_desktop:
        description: "Desktop Project Version Bump"
        type: boolean
        default: false

defaults:
  run:
    shell: bash

jobs:
  bump_version:
    name: "Bump Version"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Branch
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Login to Azure - Prod Subscription
        uses: Azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2 # v1.4.7
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "github-gpg-private-key, github-gpg-private-key-passphrase"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@72b6676b71ab476b77e676928516f6982eef7a41 # v5.3.0
        with:
          gpg_private_key: ${{ steps.retrieve-secrets.outputs.github-gpg-private-key }}
          passphrase: ${{ steps.retrieve-secrets.outputs.github-gpg-private-key-passphrase }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Create Version Branch
        id: branch
        env:
          VERSION: ${{ inputs.version_number }}
        run: |
          CLIENTS=()
          if [[ ${{ inputs.bump_browser }} == true ]]; then
            CLIENTS+=("browser")
          fi
          if [[ ${{ inputs.bump_cli }} == true ]]; then
            CLIENTS+=("cli")
          fi
          if [[ ${{ inputs.bump_desktop }} == true ]]; then
            CLIENTS+=("desktop")
          fi
          if [[ ${{ inputs.bump_web }} == true ]]; then
            CLIENTS+=("web")
          fi
          printf -v joined '%s,' "${CLIENTS[@]}"
          echo "client=${joined%,}" >> $GITHUB_OUTPUT

          BRANCH=version_bump_${VERSION}_${GITHUB_SHA:0:7}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          git switch -c ${BRANCH}

      ########################
      # VERSION BUMP SECTION #
      ########################

      ### Browser
      - name: Browser - Verify input version
        if: ${{ inputs.bump_browser == true }}
        env:
          NEW_VERSION: ${{ inputs.version_number }}
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r '.version')

          # Error if version has not changed.
          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "Version has not changed."
            exit 1
          fi

          # Check if version is newer.
          printf '%s\n' "${CURRENT_VERSION}" "${NEW_VERSION}" | sort -C -V
          if [ $? -eq 0 ]; then
            echo "Version check successful."
          fi
        working-directory: apps/browser

      - name: Bump Browser Version
        if: ${{ inputs.bump_browser == true }}
        env:
          VERSION: ${{ inputs.version_number }}
        run: npm version --workspace=@bitwarden/browser ${VERSION}

      - name: Bump Browser Version - Manifest
        if: ${{ inputs.bump_browser == true }}
        uses: bitwarden/gh-actions/version-bump@main
        with:
          version: ${{ inputs.version_number }}
          file_path: "apps/browser/src/manifest.json"

      - name: Bump Browser Version - Manifest v3
        if: ${{ inputs.bump_browser == true }}
        uses: bitwarden/gh-actions/version-bump@main
        with:
          version: ${{ inputs.version_number }}
          file_path: "apps/browser/src/manifest.v3.json"

      - name: Run Prettier after Browser Version Bump
        if: ${{ inputs.bump_browser == true }}
        run: |
          npm install -g prettier
          prettier --write apps/browser/src/manifest.json
          prettier --write apps/browser/src/manifest.v3.json

      ### CLI
      - name: CLI - Verify input version
        if: ${{ inputs.bump_cli == true }}
        env:
          NEW_VERSION: ${{ inputs.version_number }}
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r '.version')

          # Error if version has not changed.
          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "Version has not changed."
            exit 1
          fi

          # Check if version is newer.
          printf '%s\n' "${CURRENT_VERSION}" "${NEW_VERSION}" | sort -C -V
          if [ $? -eq 0 ]; then
            echo "Version check successful."
          fi
        working-directory: apps/cli

      - name: Bump CLI Version
        if: ${{ inputs.bump_cli == true }}
        env:
          VERSION: ${{ inputs.version_number }}
        run: npm version --workspace=@bitwarden/cli ${VERSION}

      ### Desktop
      - name: Desktop - Verify input version
        if: ${{ inputs.bump_desktop == true }}
        env:
          NEW_VERSION: ${{ inputs.version_number }}
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r '.version')

          # Error if version has not changed.
          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "Version has not changed."
            exit 1
          fi

          # Check if version is newer.
          printf '%s\n' "${CURRENT_VERSION}" "${NEW_VERSION}" | sort -C -V
          if [ $? -eq 0 ]; then
            echo "Version check successful."
          fi
        working-directory: apps/desktop

      - name: Bump Desktop Version - Root
        if: ${{ inputs.bump_desktop == true }}
        env:
          VERSION: ${{ inputs.version_number }}
        run: npm version --workspace=@bitwarden/desktop ${VERSION}

      - name: Bump Desktop Version - App
        if: ${{ inputs.bump_desktop == true }}
        env:
          VERSION: ${{ inputs.version_number }}
        run: npm version ${VERSION}
        working-directory: "apps/desktop/src"

      ### Web
      - name: Web - Verify input version
        if: ${{ inputs.bump_web == true }}
        env:
          NEW_VERSION: ${{ inputs.version_number }}
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r '.version')

          # Error if version has not changed.
          if [[ "$NEW_VERSION" == "$CURRENT_VERSION" ]]; then
            echo "Version has not changed."
            exit 1
          fi

          # Check if version is newer.
          printf '%s\n' "${CURRENT_VERSION}" "${NEW_VERSION}" | sort -C -V
          if [ $? -eq 0 ]; then
            echo "Version check successful."
          fi
        working-directory: apps/web

      - name: Bump Web Version
        if: ${{ inputs.bump_web == true }}
        env:
          VERSION: ${{ inputs.version_number }}
        run: npm version --workspace=@bitwarden/web-vault ${VERSION}

      ########################

      - name: Setup git
        run: |
          git config --local user.email "106330231+bitwarden-devops-bot@users.noreply.github.com"
          git config --local user.name "bitwarden-devops-bot"

      - name: Check if version changed
        id: version-changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes_to_commit=TRUE" >> $GITHUB_OUTPUT
          else
            echo "changes_to_commit=FALSE" >> $GITHUB_OUTPUT
            echo "No changes to commit!";
          fi

      - name: Commit files
        if: ${{ steps.version-changed.outputs.changes_to_commit == 'TRUE' }}
        env:
          CLIENT: ${{ steps.branch.outputs.client }}
          VERSION: ${{ inputs.version_number }}
        run: git commit -m "Bumped ${CLIENT} version to ${VERSION}" -a

      - name: Push changes
        if: ${{ (github.ref == 'refs/heads/master') && (steps.version-changed.outputs.changes_to_commit == 'TRUE') }}
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
        run: git push -u origin ${BRANCH}

      - name: Create Bump Version PR
        if: ${{ (github.ref == 'refs/heads/master') && (steps.version-changed.outputs.changes_to_commit == 'TRUE') }}
        env:
          BASE_BRANCH: master
          BRANCH: ${{ steps.branch.outputs.branch }}
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          TITLE: "Bump ${{ steps.branch.outputs.client }} version to ${{ inputs.version_number }}"
        run: |
          gh pr create --title "$TITLE" \
            --base "$BASE_BRANCH" \
            --head "$BRANCH" \
            --label "version update" \
            --label "automated pr" \
            --body "
              ## Type of change
              - [ ] Bug fix
              - [ ] New feature development
              - [ ] Tech debt (refactoring, code cleanup, dependency upgrades, etc)
              - [ ] Build/deploy pipeline (DevOps)
              - [X] Other

              ## Objective
              Automated ${{ steps.branch.outputs.client }} version bump to ${{ inputs.version_number }}"
